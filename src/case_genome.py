import os
import json
import pandas as pd
import numpy as np
from tqdm import tqdm
from time import sleep
from utils.data_file import filepath
from utils.mkdir import mkdir

# ARTICLE_CASE and ARTICLE_GENOME are generated by the first two step(case.py and genome.py)
# CURATED_MATCH can support the findings of this study are available from the corresponding author upon reasonable request.

ROOT_DIR = os.path.dirname(os.path.abspath('code'))
# INPUT

ARTICLE_CASE = filepath(ROOT_DIR, 'article', 'case.tsv')
ARTICLE_GENOME = filepath(ROOT_DIR, 'article', 'genome.tsv')
CURATED_MATCH = filepath(ROOT_DIR, 'curated_case_genome.tsv')
print(CURATED_MATCH)
print(ROOT_DIR)

# OUTPUT
OUTPUT_DIR = filepath(ROOT_DIR, 'article')
mkdir(OUTPUT_DIR)
ARTICLE_CASE_GENOME = filepath(OUTPUT_DIR, 'case_genome.tsv')

columns = ['country', 'gender', 'date', 'location', 'province']

genome_usecols = ['genome_id', 'qc_gender', 'qc_age', 'qc_sample_collection_date',
                  'qc_country', 'qc_location', 'data_source', 'virus_id', 'qc_city', 'qc_province', 'rank']
case_usecols = ['case_id', 'qc_gender', 'qc_age', 'qc_case_reported_date', 'qc_country', 'qc_location',
                'data_source', 'qc_city', 'qc_province']
rename_columns = {
    'genome_genome_id': 'genome_id',
    'genome_qc_sample_collection_date': 'genome_qc_date',
    'case_case_id': 'case_id',
    'case_qc_case_reported_date': 'case_qc_date',
    'new_case_id': 'case_id'
}
choose_columns = ['genome_id', 'case_id', 'genome_qc_gender', 'genome_qc_age', 'genome_qc_date', 'genome_qc_country',
                  'genome_qc_location', 'genome_data_source', 'case_qc_gender', 'case_qc_age', 'case_qc_date', 'case_qc_country',
                  'case_qc_location', 'case_data_source', 'curated']


def build():

    wiki_ori = pd.read_csv(
        ARTICLE_CASE,
        usecols=['qc_case_reported_date', 'qc_gender', 'qc_country',
                 'case_id', 'qc_age', 'rank', 'qc_location', 'qc_province'],
        sep='\t'
    ) \
        .rename(columns={'qc_country': 'country', 'qc_age': 'age',
                         'qc_gender': 'gender', 'qc_case_reported_date': 'date',
                         'qc_location': 'location',
                         'qc_province': 'province'
                         }) \
        .set_index('case_id')
    print(wiki_ori)
    wiki = wiki_ori \
        .assign(
            date=lambda x: pd.to_datetime(x.date),
            gender=lambda x: x.gender.map({'male': 1, 'female': 2}).fillna(0)
        ).dropna(subset=['gender']) \
        .assign(
            gender=lambda x: x.gender.astype(int)
        )[columns]

    meta_ori = pd.read_csv(
        ARTICLE_GENOME,
        sep='\t',
        usecols=['qc_sample_collection_date', 'qc_gender', 'qc_country', 'virus_id',
                 'qc_age', 'rank', 'qc_location', 'qc_province']) \
        .rename(columns={'qc_country': 'country', 'qc_age': 'age',
                         'qc_gender': 'gender', 'qc_sample_collection_date': 'date',
                         'qc_location': 'location',
                         'qc_province': 'province'
                         }) \
        .set_index('virus_id')

    meta = meta_ori \
        .assign(
            date=lambda x: pd.to_datetime(x.date),
            gender=lambda x: x.gender.map(
                {'male': 1, 'female': 2, 'unknown': 0})
        ).dropna(subset=['gender']) \
        .assign(
            gender=lambda x: x.gender.astype(int)
        )[columns]
    case = pd.read_csv(
        ARTICLE_CASE,
        sep='\t',
        usecols=case_usecols
    )

    genome = pd.read_csv(
        ARTICLE_GENOME,
        sep='\t',
        usecols=genome_usecols
    )

    result = []
    hit_count = 0
    for virus_id, meta_row in tqdm(meta.iterrows(), total=meta.shape[0]):
        tm_df = wiki.assign(
            abs_delta_coll_days=lambda x: abs((x.date - meta_row.date).dt.days)
        )
        tm_df = tm_df[(tm_df.abs_delta_coll_days <= 1) &
                      (tm_df.gender == meta_row.gender) &
                      ((tm_df['location'] == meta_row['location']) | (pd.isnull(tm_df['location']) & pd.isnull(meta_row['location'])))]
        result.extend([virus_id, x] for x in tm_df.index.tolist())

    result_df = pd.DataFrame(result, columns=('virus_id', 'new_case_id')) \
        .merge(meta_ori.add_suffix('_meta'), left_on='virus_id', right_index=True) \
        .merge(wiki_ori.add_suffix('_wiki'), left_on='new_case_id', right_index=True)
    print(result_df.columns)
    exact = result_df[~(
        (result_df['age_meta'] == np.nan) &
        (result_df['age_wiki'] == np.nan) &
        (result_df['gender_meta'] == np.nan) &
        (result_df['gender_wiki'] == np.nan)
    )][['virus_id', 'new_case_id']]. \
        rename(columns={
            'case_id': 'new_case_id'
        }).merge(
            genome[['virus_id', 'rank']]
    )
    curated_match = pd.read_csv(
        CURATED_MATCH,
        sep='\t'
    )

    exact_drop_rank_15 = exact[exact['rank'] > 15][['virus_id', 'new_case_id']]
    virus_except = list(set(curated_match.virus_id.tolist()))
    exact_drop = exact_drop_rank_15[~exact_drop_rank_15.virus_id.isin(virus_except)] \
        .assign(
            curated=False
    )
    merge_list = [curated_match, exact_drop]
    case_genome = pd.concat(merge_list, ignore_index=True) \
        .drop_duplicates() \
        .dropna(subset=['new_case_id'])\
        .drop_duplicates(subset=['virus_id', 'new_case_id'], keep='first')
    print(case_genome)
    case_genome_info = case_genome. \
        merge(genome.add_prefix('genome_'), left_on='virus_id', right_on='genome_virus_id', how='left'). \
        drop(['virus_id', 'genome_virus_id'], axis=1). \
        merge(case.add_prefix('case_'), left_on='new_case_id', right_on='case_case_id', how='left'). \
        drop(['case_case_id'], axis=1). \
        rename(columns=rename_columns)[choose_columns]. \
        sort_values(by=['curated'], ascending=False)

    case_genome_info.to_csv(
        ARTICLE_CASE_GENOME,
        sep='\t',
        encoding='utf-8',
        index=False
    )
    print(case_genome_info.shape)
    print(case_genome_info.columns)
    print('success')


if __name__ == '__main__':
    build()
